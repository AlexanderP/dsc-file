Description: Add TLS 1.2 support
Origin: https://github.com/eiskaltdcpp/eiskaltdcpp/commit/3b7b56b
Applied-Upstream: 2.4.0
Last-Update: 2016-02-03

--- a/dcpp/CryptoManager.cpp
+++ b/dcpp/CryptoManager.cpp
@@ -27,12 +27,20 @@
 #include "version.h"
 
 #include <openssl/bn.h>
-
+#include <openssl/rand.h>
 #include <bzlib.h>
 
 namespace dcpp {
 
-
+static const char ciphersuites[] =
+        "ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:"
+        "ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:"
+        "ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:"
+        "ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:"
+        "ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:"
+        "DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:"
+        "AES256-GCM-SHA384:AES256-SHA256:AES256-SHA:AES128-SHA"
+        "!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK";
 
 CryptoManager::CryptoManager()
 :
@@ -42,10 +50,10 @@
 {
     SSL_library_init();
 
-    clientContext.reset(SSL_CTX_new(TLSv1_client_method()));
-    clientVerContext.reset(SSL_CTX_new(TLSv1_client_method()));
-    serverContext.reset(SSL_CTX_new(TLSv1_server_method()));
-    serverVerContext.reset(SSL_CTX_new(TLSv1_server_method()));
+    clientContext.reset(SSL_CTX_new(SSLv23_client_method()));
+    clientVerContext.reset(SSL_CTX_new(SSLv23_client_method()));
+    serverContext.reset(SSL_CTX_new(SSLv23_server_method()));
+    serverVerContext.reset(SSL_CTX_new(SSLv23_server_method()));
 
     if(clientContext && clientVerContext && serverContext && serverVerContext) {
         dh.reset(DH_new());
@@ -104,7 +112,7 @@
             dh->p = BN_bin2bn(dh4096_p, sizeof(dh4096_p), 0);
             dh->g = BN_bin2bn(dh4096_g, sizeof(dh4096_g), 0);
 
-            if (!dh->p || !dh->g) {
+            if(!dh->p || !dh->g) {
                 dh.reset();
             } else {
                 SSL_CTX_set_options(serverContext, SSL_OP_SINGLE_DH_USE);
@@ -114,6 +122,26 @@
             }
         }
 
+        SSL_CTX_set_options(clientContext, SSL_OP_NO_SSLv2 | SSL_OP_NO_SSLv3 | SSL_OP_NO_COMPRESSION);
+        SSL_CTX_set_cipher_list(clientContext, ciphersuites);
+        SSL_CTX_set_options(serverContext, SSL_OP_SINGLE_DH_USE | SSL_OP_NO_SSLv2 | SSL_OP_NO_SSLv3 | SSL_OP_NO_COMPRESSION);
+        SSL_CTX_set_cipher_list(serverContext, ciphersuites);
+        SSL_CTX_set_options(clientVerContext, SSL_OP_NO_SSLv2 | SSL_OP_NO_SSLv3 | SSL_OP_NO_COMPRESSION);
+        SSL_CTX_set_cipher_list(clientVerContext, ciphersuites);
+        SSL_CTX_set_options(serverVerContext, SSL_OP_SINGLE_DH_USE | SSL_OP_NO_SSLv2 | SSL_OP_NO_SSLv3 | SSL_OP_NO_COMPRESSION);
+        SSL_CTX_set_cipher_list(serverVerContext, ciphersuites);
+
+        EC_KEY* tmp_ecdh;
+        /* NID_X9_62_prime256v1 is not secure, more secure is NID_secp384r1 or NID_secp521r1*/
+        if((tmp_ecdh = EC_KEY_new_by_curve_name(NID_X9_62_prime256v1)) != NULL) {
+            SSL_CTX_set_options(serverContext, SSL_OP_SINGLE_ECDH_USE);
+            SSL_CTX_set_tmp_ecdh(serverContext, tmp_ecdh);
+            SSL_CTX_set_options(serverVerContext, SSL_OP_SINGLE_ECDH_USE);
+            SSL_CTX_set_tmp_ecdh(serverVerContext, tmp_ecdh);
+
+            EC_KEY_free(tmp_ecdh);
+        }
+
         SSL_CTX_set_verify(serverContext, SSL_VERIFY_NONE, 0);
         SSL_CTX_set_verify(clientContext, SSL_VERIFY_NONE, 0);
         SSL_CTX_set_verify(clientVerContext, SSL_VERIFY_PEER | SSL_VERIFY_FAIL_IF_NO_PEER_CERT, 0);
