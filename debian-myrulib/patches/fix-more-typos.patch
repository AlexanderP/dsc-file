Description: Fix an assortment of typos
Author: Olly Betts <olly@survex.com>
Forwarded: http://trac.wxwidgets.org/ticket/14346
Last-Update: 2012-01-09

--- a/wx/contrib/include/wx/foldbar/captionbar.h
+++ b/wx/contrib/include/wx/foldbar/captionbar.h
@@ -335,7 +335,7 @@ public:
 
 #endif
 
-    /** Returns wether the status of the bar is expanded or collapsed */
+    /** Returns whether the status of the bar is expanded or collapsed */
     bool IsCollapsed() const {
         return m_collapsed;
     };
@@ -429,7 +429,7 @@ public:
         return new wxCaptionBarEvent(*this);
     };
 
-    /** Returns wether the bar is expanded or collapsed. True means expanded */
+    /** Returns whether the bar is expanded or collapsed. True means expanded */
     bool GetFoldStatus() const {
         wxCHECK(m_captionBar, false);
         return !m_captionBar->IsCollapsed();
--- a/wx/contrib/include/wx/foldbar/foldpanelbar.h
+++ b/wx/contrib/include/wx/foldbar/foldpanelbar.h
@@ -37,7 +37,7 @@
 
 /** \class wxFoldPanel
     This class is used to return a reference to the fold panel that is added by wxFoldPanelBar::AddFoldPanel(). Use
-    wxFoldPanel::IsOk() to check wether the result is ok to be used in further operations. Use wxFoldPanel::GetItem()
+    wxFoldPanel::IsOk() to check whether the result is ok to be used in further operations. Use wxFoldPanel::GetItem()
     to obtain a parent window reference to create the controls on you want to add with wxFoldPanelBar::AddFoldPanelWindow().<br><br>
 */
 
--- a/wx/contrib/include/wx/foldbar/foldpanelitem.h
+++ b/wx/contrib/include/wx/foldbar/foldpanelitem.h
@@ -235,7 +235,7 @@ public:
 
     bool IsVertical() const;
 
-    // returns space of caption only. This is for folding calulation
+    // returns space of caption only. This is for folding calculation
     // purposes
 
     int GetCaptionLength() const {
--- a/wx/docs/html/wx/wx_wxfilename.html
+++ b/wx/docs/html/wx/wx_wxfilename.html
@@ -31,7 +31,7 @@ like <A HREF="wx_wxfilename.html#wxfilenameisdirreadable">IsDirReadable</A> use
 <A HREF="wx_wxfilename.html#wxfilenamegetpath">GetPath</A> whereas methods dealing 
 with file names like <A HREF="wx_wxfilename.html#wxfilenameisfilereadable">IsFileReadable</A>
 use <A HREF="wx_wxfilename.html#wxfilenamegetfullpath">GetFullPath</A>.<P>
-If it is not known wether a string contains a directory name or
+If it is not known whether a string contains a directory name or
 a complete file name (such as when interpreting user input) you need to use
 the static function <A HREF="wx_wxfilename.html#wxfilenamedirexists">wxFileName::DirExists</A>
 (or its identical variants <A HREF="wx_wxdir.html#wxdirexists">wxDir::Exists</A> and
--- a/wx/docs/latex/wx/filename.tex
+++ b/wx/docs/latex/wx/filename.tex
@@ -41,7 +41,7 @@ like \helpref{IsDirReadable}{wxfilenameisdirreadable} use
 with file names like \helpref{IsFileReadable}{wxfilenameisfilereadable}
 use \helpref{GetFullPath}{wxfilenamegetfullpath}.
 
-If it is not known wether a string contains a directory name or
+If it is not known whether a string contains a directory name or
 a complete file name (such as when interpreting user input) you need to use
 the static function \helpref{wxFileName::DirExists}{wxfilenamedirexists}
 (or its identical variants \helpref{wxDir::Exists}{wxdirexists} and
--- a/wx/wxPython/demo/pyTree.py
+++ b/wx/wxPython/demo/pyTree.py
@@ -114,7 +114,7 @@ class pyTree(wx.TreeCtrl):
         wxTreeItemData referencing the child object. We get this
         object using child = getattr(parent, item).
 
-        Finally, we check wether the child returns a non-empty dir()
+        Finally, we check whether the child returns a non-empty dir()
         list. If so, it is labeled as 'having children', so that it
         may be expanded. When it actually is expanded, this function
         will again figure out what the offspring is.
--- a/wx/wxPython/wx/lib/agw/foldpanelbar.py
+++ b/wx/wxPython/wx/lib/agw/foldpanelbar.py
@@ -687,7 +687,7 @@ class CaptionBar(wx.Window):
 
 
     def IsCollapsed(self):
-        """ Returns wether the status of the bar is expanded or collapsed. """
+        """ Returns whether the status of the bar is expanded or collapsed. """
         
         return self._collapsed
     
@@ -747,7 +747,7 @@ class CaptionBar(wx.Window):
 
     def IsVertical(self):
         """
-        Returns wether the L{CaptionBar} has a default orientation or not.
+        Returns whether the L{CaptionBar} has a default orientation or not.
         Default is vertical.
         """
         
diff -u b/wxPython/wx/lib/masked/maskededit.py b/wxPython/wx/lib/masked/maskededit.py
--- b/wxPython/wx/lib/masked/maskededit.py
+++ b/wx/wxPython/wx/lib/masked/maskededit.py
@@ -58,7 +58,7 @@
 ====================
 
 masked.TextCtrl:
-    is a sublassed text control that can carefully control the user's input
+    is a subclassed text control that can carefully control the user's input
     based on a mask string you provide.
 
     General usage example::
@@ -225,7 +225,7 @@
             0  integer fields get leading zeros
             D  Date[/time] field
             T  Time field
-            F  Auto-Fit: the control calulates its size from
+            F  Auto-Fit: the control calculates its size from
                the length of the template mask
             V  validate entered chars against validRegex before allowing them
                to be entered vs. being allowed by basic mask and then having
@@ -267,7 +267,7 @@
 
 shiftDecimalChar
   The default "shiftDecimalChar" (used for "backwards-tabbing" until
-  shift-tab is fixed in wxPython) is '>' (for QUERTY keyboards.) for
+  shift-tab is fixed in wxPython) is '>' (for QWERTY keyboards.) for
   other keyboards, you may want to customize this, eg '?' for shift ',' on
   AZERTY keyboards, ':' or ';' for other European keyboards, etc.
   (This is a control-level parameter.)
--- a/wx/wxPython/wx/tools/XRCed/XMLTreeMenu.py
+++ b/wx/wxPython/wx/tools/XRCed/XMLTreeMenu.py
@@ -47,7 +47,7 @@ class XMLTreeMenu(wx.Menu):
                     self.AppendMenu(ID.APPEND, 'Append', menu,
                                     'Create object as the last child')
             if comp is not Manager.rootComponent:
-                self.Append(ID.SUBCLASS, 'Sublass...', 'Define subclass')
+                self.Append(ID.SUBCLASS, 'Subclass...', 'Define subclass')
             self.AppendSeparator()
             
             if container:
