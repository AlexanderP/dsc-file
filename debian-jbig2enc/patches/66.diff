diff --git a/pdf.py b/pdf.py
index 9237141..858a79b 100755
--- a/pdf.py
+++ b/pdf.py
@@ -22,6 +22,7 @@
 import struct
 import glob
 import os
+import platform
 
 # This is a very simple script to make a PDF file out of the output of a
 # multipage symbol compression.
@@ -29,27 +30,30 @@
 # python pdf.py output > out.pdf
 
 dpi = 72
+ispy2 = platform.python_version_tuple()[0]=='2'
+ispy3 = platform.python_version_tuple()[0]=='3'
 
 class Ref:
   def __init__(self, x):
     self.x = x
-  def __str__(self):
-    return "%d 0 R" % self.x
+
+  def get_bytes(self):
+    return b"%d 0 R" % self.x
 
 class Dict:
   def __init__(self, values = {}):
     self.d = {}
     self.d.update(values)
 
-  def __str__(self):
-    s = ['<< ']
+  def get_bytes(self):
+    s = [b'<< ']
     for (x, y) in self.d.items():
-      s.append('/%s ' % x)
-      s.append(str(y))
-      s.append("\n")
-    s.append(">>\n")
+      s.append(b'/%s ' % x.encode())
+      s.append(y.encode())
+      s.append(b"\n")
+    s.append(b">>\n")
 
-    return ''.join(s)
+    return b''.join(s)
 
 global_next_id = 1
 
@@ -65,16 +69,19 @@ def __init__(self, d = {}, stream = None):
     self.id = global_next_id
     global_next_id += 1
 
-  def __str__(self):
+  def get_bytes(self):
     s = []
-    s.append(str(self.d))
+    s.append(self.d.get_bytes())
     if self.stream is not None:
-      s.append('stream\n')
-      s.append(self.stream)
-      s.append('\nendstream\n')
-    s.append('endobj\n')
+      s.append(b'stream\n')
+      if ispy3 and isinstance(self.stream, str):
+        s.append(self.stream.encode())
+      else:
+        s.append(self.stream)
+      s.append(b'\nendstream\n')
+    s.append(b'endobj\n')
 
-    return ''.join(s)
+    return b''.join(s)
 
 class Doc:
   def __init__(self):
@@ -89,7 +96,7 @@ def add_page(self, o):
     self.pages.append(o)
     return self.add_object(o)
 
-  def __str__(self):
+  def get_bytes(self):
     a = []
     j = [0]
     offsets = []
@@ -97,27 +104,26 @@ def __str__(self):
     def add(x):
       a.append(x)
       j[0] += len(x) + 1
-    add('%PDF-1.4')
+    add(b'%PDF-1.4')
     for o in self.objs:
       offsets.append(j[0])
-      add('%d 0 obj' % o.id)
-      add(str(o))
+      add(b'%d 0 obj' % o.id)
+      add(o.get_bytes())
     xrefstart = j[0]
-    a.append('xref')
-    a.append('0 %d' % (len(offsets) + 1))
-    a.append('0000000000 65535 f ')
+    a.append(b'xref')
+    a.append(b'0 %d' % (len(offsets) + 1))
+    a.append(b'0000000000 65535 f ')
     for o in offsets:
-      a.append('%010d 00000 n ' % o)
-    a.append('')
-    a.append('trailer')
-    a.append('<< /Size %d\n/Root 1 0 R >>' % (len(offsets) + 1))
-    a.append('startxref')
-    a.append(str(xrefstart))
-    a.append('%%EOF')
+      a.append(b'%010d 00000 n ' % o)
+    a.append(b'')
+    a.append(b'trailer')
+    a.append(b'<< /Size %d\n/Root 1 0 R >>' % (len(offsets) + 1))
+    a.append(b'startxref')
+    a.append(b'%d' % xrefstart)
+    a.append(b'%%EOF')
 
     # sys.stderr.write(str(offsets) + "\n")
-
-    return '\n'.join(a)
+    return b'\n'.join(a)
 
 def ref(x):
   return '%d 0 R' % x
@@ -128,22 +134,22 @@ def main(symboltable='symboltable', pagefiles=glob.glob('page-*')):
   doc.add_object(Obj({'Type' : '/Outlines', 'Count': '0'}))
   pages = Obj({'Type' : '/Pages'})
   doc.add_object(pages)
-  symd = doc.add_object(Obj({}, file(symboltable, 'rb').read()))
+  symd = doc.add_object(Obj({}, open(symboltable, 'rb').read()))
   page_objs = []
 
   pagefiles.sort()
   for p in pagefiles:
     try:
-      contents = file(p, mode='rb').read()
+      contents = open(p, "rb").read()
     except IOError:
       sys.stderr.write("error reading page file %s\n"% p)
       continue
-    (width, height, xres, yres) = struct.unpack('>IIII', contents[11:27])
-
-    if xres == 0:
-        xres = dpi
-    if yres == 0:
-        yres = dpi
+    (width, height,xres,yres) = struct.unpack('>IIII', contents[11:27])
+    
+    if xres==0:
+      xres=dpi
+    if yres==0:
+      yres=dpi
 
     xobj = Obj({'Type': '/XObject', 'Subtype': '/Image', 'Width':
         str(width), 'Height': str(height), 'ColorSpace': '/DeviceGray',
@@ -162,7 +168,13 @@ def main(symboltable='symboltable', pagefiles=glob.glob('page-*')):
     pages.d.d['Count'] = str(len(page_objs))
     pages.d.d['Kids'] = '[' + ' '.join([ref(x.id) for x in page_objs]) + ']'
 
-  print str(doc)
+  doc_bytes = doc.get_bytes()
+  if ispy2:
+    print(doc_bytes)
+  elif ispy3:
+    sys.stdout.buffer.write(doc_bytes)
+  else:
+    raise Exception("unexpected python version: %s" % platform.python_version_tuple()[0])
 
 
 def usage(script, msg):
@@ -173,7 +185,7 @@ def usage(script, msg):
 
 
 if __name__ == '__main__':
-  if sys.platform == "win32":
+  if ispy2 and sys.platform == "win32":
     import msvcrt
     msvcrt.setmode(sys.stdout.fileno(), os.O_BINARY)
 
